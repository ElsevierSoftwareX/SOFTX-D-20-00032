function varargout = mStat_MigrationAnalyzer(varargin)
% MStaT Migration Analyzer
% This module analysis the migration generated by a period of time, using 
% the same calculates of the Planar Geometry Module. The Migration Module 
% allows quantify the punctual migration and determinate the spatial
% ariation of the migration along the study reach. Also MStaT users can
% determinate the migration directions of the natural channels

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @mStat_MigrationAnalyzer_OpeningFcn, ...
                   'gui_OutputFcn',  @mStat_MigrationAnalyzer_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before mStat_MigrationAnalyzer is made visible.
function mStat_MigrationAnalyzer_OpeningFcn(hObject, eventdata, handles, varargin)


% Choose default command line output for mStat_MigrationAnalyzer
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

set_enable(handles,'init')

% Set the name and version
set(handles.figure1,'Name',['MStaT: Migration Analyzer '], ...
    'DockControls','off')

axes(handles.pictureReach);
axes(handles.signalvariation);

%data cursor type
dcm_objt0 = datacursormode(gcf);

set(dcm_objt0,'UpdateFcn',@mStat_myupdatefcnMigration);

set(dcm_objt0,'Displaystyle','Window','Enable','on');

pos = get(0,'userdata');
% Push messages to Log Window:
    % ----------------------------
    log_text = {...
        '';...
        ['%----------- ' datestr(now) ' ------------%'];...
        'LETs START!!!'};
    statusLogging(handles.LogWindow, log_text)


% --- Outputs from this function are returned to the command line.
function varargout = mStat_MigrationAnalyzer_OutputFcn(hObject, eventdata, handles) 

% Get default command line output from handles structure
varargout{1} = handles.output;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Toolbar Menu
% --------------------------------------------------------------------

% --------------------------------------------------------------------
function filefunctions_Callback(hObject, eventdata, handles)
% empty


% --------------------------------------------------------------------
function openfunctions_Callback(hObject, eventdata, handles)
% empty

function newproject_Callback(hObject, eventdata, handles)
set_enable(handles,'init')

% Push messages to Log Window:
    % ----------------------------
    log_text = {...
        '';...
        ['%----------- ' datestr(now) ' ------------%'];...
        'New Project'};
    statusLogging(handles.LogWindow, log_text)


% --------------------------------------------------------------------
function closefunctions_Callback(hObject, eventdata, handles)
close


% --------------------------------------------------------------------
function initialtime_Callback(hObject, eventdata, handles)
set_enable(handles,'init')
handles.celltable=cell(2,3);

celltable(1:2,2:3)={''};
guidata(hObject,handles)

%This function incorporate the initial data
[ReadVar]=mStat_ReadInputFiles;

if ReadVar.File==0
else
    
    % Push messages to Log Window:
    % ----------------------------
    log_text = {...
                '';...
                ['%--- ' datestr(now) ' ---%'];...
                'Final Time Centerline Loaded:';[cell2mat({ReadVar.File})]};
                statusLogging(handles.LogWindow, log_text)
                
    %Convert information
    handles.xCoord=[];
    handles.yCoord=[];
    handles.xCoord{1}(:,1)=ReadVar.xCoord{:,1};
    handles.yCoord{1}(:,1)=ReadVar.yCoord{:,1};
    handles.formatfileread=ReadVar.comp;
    guidata(hObject, handles);
    
    
    %Write File name
    celltable(1,1)={ReadVar.File};
    set(handles.sedtable,'Data',celltable)      
    
    %set_enable(handles,'loadfiles')
    
end


% --------------------------------------------------------------------
function finaltime_Callback(hObject, eventdata, handles)

celltable=get(handles.sedtable,'Data');

%celltable(1:2,2:3)={''};

% This function incorporate the initial data
[ReadVar]=mStat_ReadInputFiles;

if ReadVar.File==0
else
    
    % Push messages to Log Window:
    % ----------------------------
    log_text = {...
                '';...
                ['%--- ' datestr(now) ' ---%'];...
                'Final Time Centerline Loaded:';[cell2mat({ReadVar.File})]};
                statusLogging(handles.LogWindow, log_text)
                
    % Convert information            
    handles.xCoord{2}(:,1)=ReadVar.xCoord{:,1};
    handles.yCoord{2}(:,1)=ReadVar.yCoord{:,1};
    handles.formatfileread=ReadVar.comp;
    guidata(hObject, handles);
    set_enable(handles,'loadfiles')
    
    %Write File name
    celltable(2,1)={ReadVar.File};
    set(handles.sedtable,'Data',celltable)              
end


% --------------------------------------------------------------------
function export_Callback(hObject, eventdata, handles)
% empty


% --------------------------------------------------------------------
function matfiles_Callback(hObject, eventdata, handles)
hwait = waitbar(0,'Exporting .mat File...');

%Read Data
geovar = getappdata(0, 'geovarf');
Migra = getappdata(0, 'Migra');

[file,path] = uiputfile('*.mat','Save file');
save([path file], 'geovar','Migra');
waitbar(1,hwait)
delete(hwait)

% Push messages to Log Window:
% ----------------------------
log_text = {...
    '';...
    ['%----------- ' datestr(now) ' ------------%'];...
    'Export MAT file succesfully'};
statusLogging(handles.LogWindow, log_text)


% --------------------------------------------------------------------
function summary_Callback(hObject, eventdata, handles)
mStat_SummaryMigration(handles.Migra);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Calculate
% --- Executes on button press in calculate.
function calculate_Callback(hObject, eventdata, handles)
tableData = get(handles.sedtable, 'data');
% 
cla(handles.wavel_axes)
cla(handles.pictureReach)
cla(handles.signalvariation)
linkaxes(handles.signalvariation)
delete(allchild(handles.signalvariation))

handles.width=str2double(cellstr(tableData(:,3)));
handles.year=str2double(cellstr(tableData(:,2)));

%Calculate
sel=2;%Inflection points default method
handles.bendSelect=[];%none data
Tools=2;%Migration Module
level=5;%filter level default
for i=1:2
    [geovar{i}]=mStat_planar(handles.xCoord{i},handles.yCoord{i},...
        handles.width(i),sel,handles.pictureReach,handles.bendSelect,Tools,level);
end

%save data
setappdata(0, 'geovarf', geovar);

handles.geovar=geovar;
guidata(hObject,handles)

%Calculate the migration using vectors
Migra=mStat_Migration(geovar,handles);

handles.Migra=Migra;
guidata(hObject,handles)

%store data
setappdata(0, 'Migra', Migra);
setappdata(0, 'handles', handles);

set_enable(handles,'results')

%Define how much cut off foun it
if isnan(Migra.cutoff)
    Cutoff=0;
else
    Cutoff=nansum(isfinite(Migra.cutoff));
end

% Push messages to Log Window:
% ----------------------------
log_text = {...
    '';...
    ['%----------- ' datestr(now) ' ------------%'];...
    'Calculate finished';...
    'Summary';...
    'Mean Migration/year';[cell2mat({nanmean(Migra.MigrationSignal)/Migra.deltat})];...
    'Maximum Migration';[cell2mat({nanmax(Migra.MigrationSignal)})];...
    'Minimum Migration';[cell2mat({nanmin(Migra.MigrationSignal)})];...
    'Chute Cut off Found';[cell2mat({Cutoff})]};
statusLogging(handles.LogWindow, log_text)


% --- Executes on button press in identifycutoff.
function identifycutoff_Callback(hObject, eventdata, handles)
%read variables
Migra=handles.Migra;
geovar=handles.geovar;

cut=nan;
%Indentify cutoff using wavelength
e=1;
 for t=1:length(Migra.Indext1)-1
    if nansum(isfinite(Migra.cutoff(Migra.Indext1{t}.ind(1,2:end-1))))>1
        [r,fin]=max(isfinite(Migra.cutoff(Migra.Indext1{t}.ind)));
        cut(e)=Migra.Indext1{t}.ind(fin(1,1));
        e=e+1;
        clear fin r
    end
 end
 
 if isnan(cut)
     warndlg('Doesn´t found Cutoff')
 else     
    axes(handles.pictureReach)
    hold on
    text(geovar{1}.equallySpacedX(cut),geovar{1}.equallySpacedY(cut),'Cutoff')
    hold off
 end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%
%Extra Function
%%%%%%%%%%%%%%%%%%%%%%%%%%

function set_enable(handles,enable_state)
%Set initial an load files
switch enable_state
    case 'init'
    axes(handles.signalvariation)
    cla reset
    axes(handles.wavel_axes)
    cla reset
    axes(handles.pictureReach)
    cla reset
    set(handles.calculate,'Enable','off');
    set(handles.sedtable, 'RowName', {'t0','t1'});
    set(handles.sedtable, 'Data', cell(2,3));
    set(findall(handles.cutoffpanel, '-property', 'enable'), 'enable', 'off')
    set(findall(handles.panelresults, '-property', 'enable'), 'enable', 'off')
    set(handles.summary,'Enable','off');
    set(handles.export,'Enable','off');
    case 'loadfiles'
    cla(handles.signalvariation)
    %set(handles.sedtable, 'Data', cell(2,3));
    cla(handles.wavel_axes)
    set(handles.calculate,'Enable','on');
    set(findall(handles.panelresults, '-property', 'enable'), 'enable', 'on')
    case 'results'
    set(findall(handles.cutoffpanel, '-property', 'enable'), 'enable', 'on')
    set(handles.summary,'Enable','on');
    set(handles.export,'Enable','on');
    otherwise
end


% --- Executes on selection change in LogWindow.
function LogWindow_Callback(hObject, eventdata, handles)
% empty


% --- Executes during object creation, after setting all properties.
function LogWindow_CreateFcn(hObject, eventdata, handles)
% hObject    handle to LogWindow (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in predictor.
function predictor_Callback(hObject, eventdata, handles)
% hObject    handle to predictor (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
